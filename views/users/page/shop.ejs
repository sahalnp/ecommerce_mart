<%- include('../partials/header') %>
<head>
   <link rel="stylesheet" href="/assets/css/shop.css">
   <style>
    .product-hidden {
        display: none !important;
    }
    
    .filter-section {
        margin-bottom: 20px;
    }
    
    .filter-section label {
        display: block;
        margin-bottom: 8px;
        cursor: pointer;
        padding: 5px 0;
    }
    
    .filter-section input[type="checkbox"] {
        margin-right: 8px;
    }
    
    .price-inputs {
        display: flex;
        gap: 10px;
        margin-top: 10px;
    }
    
    .price-field {
        flex: 1;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    .no-products {
        text-align: center;
        padding: 40px;
        color: #666;
        font-size: 18px;
    }
   </style>
</head>

<main>
    <!-- Hero Area Start-->
    <div class="slider-area">
        <div class="single-slider slider-height2 d-flex align-items-center">
            <div class="container">
                <div class="row">
                    <div class="col-xl-12">
                        <div class="hero-cap text-center">
                            <h2 class="name">Watch Shop</h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Shop Content Area -->
    <div class="shop-main-container">
        <div class="container-fluid">
            <div class="row">
                <!-- Filter Sidebar - Left Side -->
                <div class="col-lg-3 col-md-4">
                    <aside class="filter-sidebar">
                        <div class="filter-header">
                            <h2>Filters</h2>
                            <button class="clear-filters">Clear All</button>
                        </div>

                        <!-- Price Filter -->
                        <section class="filter-section">
                            <h3>Price</h3>
                            <p class="price-range">₹500 - ₹50,000</p>
                            <div class="price-inputs">
                                <input type="number" min="0" value="500" id="min-price" class="price-field" placeholder="Min">
                                <input type="number" max="100000" value="50000" id="max-price" class="price-field" placeholder="Max">
                            </div>
                        </section>

                        <!-- Watch Shape -->
                            <section class="filter-section">
                                <h3>Shape</h3>
                                <% shape.forEach(s => { %>
                                    <label>
                                        <input type="checkbox" name="caseShape" value="<%= s.toLowerCase() %>"> <%= s %>
                                    </label>
                                <% }) %>
                            </section>
                        <!-- Brand -->
                             <section class="filter-section">
                                <h3>Brand</h3>
                                <% brand.forEach(b => { %>
                                    <label>
                                        <input type="checkbox" name="brand" value="<%= b.toLowerCase() %>"> <%= b %>
                                    </label>
                                <% }) %>
                            </section>
                        <!-- Category -->
                         <section class="filter-section">
                                <h3>Category</h3>
                                <% cat.forEach(c => { %>
                                    <label>
                                        <input type="checkbox" name="category" value="<%= c.toLowerCase() %>"> <%= c %>
                                    </label>
                                <% }) %>
                            </section>
                        <!-- Material -->
                       <section class="filter-section">
                            <h3>Material</h3>
                            <% mat.forEach(material => { %>
                                <label>
                                    <input type="checkbox" name="material" value="<%= material.toLowerCase() %>"> <%= material %>
                                </label>
                            <% }) %>
                        </section>

                    </aside>
                </div>

                <!-- Products Section - Right Side -->
                <div class="col-lg-9 col-md-8">
                    <section class="popular-items latest-padding">
                        <div class="container-fluid">
                            <!-- Product Controls -->
                            <div class="row product-btn justify-content-between mb-40">
                                <div class="col-md-8">
                                    <div class="results-count">
                                        <span id="product-count">Showing <%= product.length %> products</span>
                                    </div>
                                </div>

                                <!-- Sort Dropdown -->
                                <div class="col-md-4">
                                    <div class="select-this">
                                        <form action="#">
                                            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                                            <div class="select-itms">
                                                <select name="select" id="select1">
                                                    <option value="featured">Featured</option>
                                                    <option value="price-low-high">Price: Low to High</option>
                                                    <option value="price-high-low">Price: High to Low</option>
                                                    <option value="newest">Newest Arrivals</option>
                                                    <option value="rating">Best Rated</option>
                                                </select>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>

                           <div class="tab-content" id="nav-tabContent">
                            <div class="tab-pane fade show active" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab">
                                <div class="row product-grid" id="products-container">
                                    <% for (let index = 0; index < product.length; index++) { %>
                                        <div class="col-xl-4 col-lg-6 col-md-6 col-sm-12 product-item" 
                                            data-featured="<%= product[index].isFeatured %>"
                                            data-price="<%= product[index].pricing.salePrice %>"
                                            data-brand="<%= product[index].brand && product[index].brand.name ? product[index].brand.name.toLowerCase() : '' %>"
                                            data-rating="<%= product[index].averageRating || 0 %>"
                                            data-category="<%= Array.isArray(product[index].category) ? product[index].category.map(c => c.name.toLowerCase()).join(',') : '' %>"
                                            data-material="<%= product[index].bandMaterial ? product[index].bandMaterial.toLowerCase() : '' %>"
                                            data-case-shape="<%= product[index].caseShape ? product[index].caseShape.toLowerCase() : '' %>"
                                            data-title="<%= product[index].title.toLowerCase() %>"
                                            data-product-id="<%= product[index]._id %>">
                                            <div class="single-popular-items mb-50 text-center">
                                                <div class="popular-img">
                                                    <a href="/product/<%= product[index]._id %>">
                                                        <img src="<%= product[index].image[0]?.filepath || 'default-image-path.jpg' %>" height="350px" alt="<%= product[index].title %>" />
                                                    </a>
                                                    <div class="img-cap">
                                                        <% const inCart = cartItems && cartItems.some(item => item.productId.toString() === product[index]._id.toString()); %>
                                                        <% if (inCart) { %>
                                                            <a class="cart" href="/cart"><span>Go to cart</span></a>
                                                        <% } else if (product[index].inStock <= 0) { %>
                                                            <a class="cart" onclick="addToCart('<%= product[index]._id %>', <%= product[index].inStock %>)" style="pointer-events: none; opacity: 0.5;"><span>Out of Stock</span></a>
                                                        <% } else { %>
                                                            <a class="cart" onclick="addToCart('<%= product[index]._id %>', <%= product[index].inStock %>)"><span>Add to cart</span></a>
                                                        <% } %>
                                                    </div>
                                                    <div class="favorit-items">
                                                        <button 
                                                            class="heart-toggle" 
                                                            data-liked="<%= wish.some(w => w._id.toString() === product[index]._id.toString()) ? 'true' : 'false' %>" 
                                                            data-product-id="<%= product[index]._id %>"
                                                            title="<%= wish.some(w => w._id.toString() === product[index]._id.toString()) ? 'Remove from wishlist' : 'Add to wishlist' %>"
                                                            aria-label="<%= wish.some(w => w._id.toString() === product[index]._id.toString()) ? 'Remove from wishlist' : 'Add to wishlist' %>">
                                                            <div class="heart-icon"></div>
                                                        </button>
                                                    </div>
                                                </div>
                                                <div class="popular-caption">
                                                    <h3><a href="/product/<%= product[index]._id %>"><%= product[index].title %></a></h3>
                                                    <span>₹ &nbsp;<%= product[index].pricing.salePrice %></span>
                                                </div>
                                            </div>
                                        </div>
                                        <% } %>
                                    </div>
                                    <div class="no-products" id="no-products" style="display: none;">
                                        <p>No products found matching your filters.</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>
                </div>
            </div>
        </div>
    </div>

  <!-- Shop Method Area -->
    <div class="shop-method-area pt-5">
        <div class="container">
            <div class="method-wrapper">
                <div class="row d-flex justify-content-between">
                    <div class="col-xl-4 col-lg-4 col-md-6">
                        <div class="single-method mb-40">
                            <i class="ti-package"></i>
                            <h6>Free Shipping Method</h6>
                            <p>Fast and reliable delivery to your doorstep with no additional charges on orders above ₹999.</p>
                        </div>
                    </div>
                    <div class="col-xl-4 col-lg-4 col-md-6">
                        <div class="single-method mb-40">
                            <i class="ti-unlock"></i>
                            <h6>Secure Payment System</h6>
                            <p>Your transactions are protected with industry-standard encryption and secure payment gateways.</p>
                        </div>
                    </div>
                    <div class="col-xl-4 col-lg-4 col-md-6">
                        <div class="single-method mb-40">
                            <i class="ti-reload"></i>
                            <h6>Easy Return Policy</h6>
                            <p>Hassle-free returns within 30 days if you're not completely satisfied with your purchase.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="cart-toast">Item added to cart</div>
    <div class="wishlist-toast">Added to wishlist</div>

</main>

  <script>
    const csrfToken = "<%= csrfToken %>";

    // Add to cart function
    async function addToCart(productId, inStock) {
        if (inStock <= 0) {
            showWishlistToast("Item is out of stock! 🚫", true);
            return;
        }

        try {
            const res = await axios.post(`/add-to-cart`, { productId, quantity: 1 }, {
                withCredentials: true,
                headers: {
                    'CSRF-Token': csrfToken,
                }
            });

            console.log("Added to cart", res.data);

            const toast = document.querySelector('.cart-toast');
            if (toast) {
                toast.style.display = 'block';
                setTimeout(() => {
                    toast.style.display = 'none';
                    window.location.reload();
                }, 3000);
            }

        } catch (error) {
            console.error("Add to cart failed:", error);
            alert("Failed to add item to cart.");
        }
    }

    // Wishlist functionality
    document.addEventListener("click", function (e) {
        const button = e.target.closest(".heart-toggle");
        if (!button) return;

        const isLiked = button.getAttribute("data-liked") === "true";
        const productId = button.getAttribute("data-product-id");

        if (!productId) return alert("Product ID not found.");

        if (button.classList.contains('loading')) return;

        showLoadingState(button);

        if (isLiked) {
            removeFromWishlist(productId, button);
        } else {
            addWishlist(productId, button);
        }
    });

    function showLoadingState(button) {
        button.classList.add('loading');
        const heartIcon = button.querySelector('.heart-icon');
        heartIcon.innerHTML = '<div class="heart-loading"></div>';
    }

    function hideLoadingState(button) {
        button.classList.remove('loading');
        const heartIcon = button.querySelector('.heart-icon');
        heartIcon.innerHTML = '';
    }

    async function addWishlist(productId, button) {
        try {
            const res = await axios.post(`/wishlist/add/${productId}`, { _csrf: csrfToken }, { withCredentials: true });
            console.log("Added to wishlist", res.data);
            
            button.setAttribute("data-liked", "true");
            button.setAttribute("title", "Remove from wishlist");
            button.setAttribute("aria-label", "Remove from wishlist");
            hideLoadingState(button);
            
            showWishlistToast("Added to wishlist ❤️");
            
        } catch (err) {
            hideLoadingState(button);
            showWishlistToast("Failed to add to wishlist", true);
            console.error("Add wishlist error: ", err);
        }
    }

    async function removeFromWishlist(productId, button) {
        try {
            const res = await axios.post(`/wishlist/remove/${productId}`, { _csrf: csrfToken }, { withCredentials: true });
            console.log("Removed from wishlist", res.data);
            
            button.setAttribute("data-liked", "false");
            button.setAttribute("title", "Add to wishlist");
            button.setAttribute("aria-label", "Add to wishlist");
            hideLoadingState(button);
            
            showWishlistToast("Removed from wishlist");
            
        } catch (err) {
            hideLoadingState(button);
            showWishlistToast("Failed to remove from wishlist", true);
            console.error("Remove wishlist error: ", err);
        }
    }

    function showWishlistToast(message, isError = false) {
        const toast = document.querySelector('.wishlist-toast');
        if (toast) {
            toast.textContent = message;
            toast.style.backgroundColor = isError ? '#e74c3c' : '#ff4757';
            toast.style.display = 'block';
            setTimeout(() => {
                toast.style.display = 'none';
            }, 3000);
        }
    }

    // Filter and Sort functionality - COMPLETELY FIXED
    let allProducts = [];
    let filteredProducts = [];

    // Initialize products array - FIXED VERSION
    document.addEventListener('DOMContentLoaded', function() {
        allProducts = Array.from(document.querySelectorAll('.product-item')).map(el => {
            return {
                element: el,
                price: parseFloat(el.getAttribute('data-price')),
                brand: el.getAttribute('data-brand'), // Direct from data attribute
                material: el.getAttribute('data-material'), // Direct from data attribute
                caseShape: el.getAttribute('data-case-shape'), // Direct from data attribute
                title: el.getAttribute('data-title'),
                category: el.getAttribute('data-category'), // Comma-separated string
                productId: el.getAttribute('data-product-id'),
                averageRating: parseFloat(el.getAttribute('data-rating')) || 0,
                isFeatured: el.getAttribute('data-featured') === 'true'
            };
        });

        console.log('Initialized products:', allProducts);
        filteredProducts = [...allProducts];
        updateProductDisplay();
    });

    // Price Range Functionality
    const minPrice = document.getElementById('min-price');
    const maxPrice = document.getElementById('max-price');
    const priceRange = document.querySelector('.price-range');

    minPrice.addEventListener('input', function() {
        const minVal = parseInt(this.value) || 0;
        const maxVal = parseInt(maxPrice.value);
        
        if (minVal >= maxVal) {
            this.value = maxVal - 1000;
        }
        
        updatePriceDisplay();
        applyFilters();
    });

    maxPrice.addEventListener('input', function() {
        const minVal = parseInt(minPrice.value);
        const maxVal = parseInt(this.value) || 0;
        
        if (maxVal <= minVal) {
            this.value = minVal + 1000;
        }
        
        updatePriceDisplay();
        applyFilters();
    });

    function updatePriceDisplay() {
        const minVal = parseInt(minPrice.value);
        const maxVal = parseInt(maxPrice.value);
        
        priceRange.textContent = `₹${minVal.toLocaleString('en-IN')} - ₹${maxVal.toLocaleString('en-IN')}`;
    }

    // Clear filters functionality
    const clearFiltersBtn = document.querySelector('.clear-filters');
    clearFiltersBtn.addEventListener('click', function() {
        minPrice.value = 500;
        maxPrice.value = 50000;
        updatePriceDisplay();
        
        const checkboxes = document.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(checkbox => {
            checkbox.checked = false;
        });
        
        const sortSelect = document.getElementById('select1');
        if (sortSelect) sortSelect.value = 'featured';
        
        applyFilters();
    });

    // MAIN FILTER FUNCTION - COMPLETELY FIXED
    function applyFilters() {
        const selectedShapes = getSelectedValues('caseShape');
        const selectedCategories = getSelectedValues('category');
        const selectedBrands = getSelectedValues('brand');
        const selectedMaterials = getSelectedValues('material');

        const minPriceVal = parseInt(minPrice.value) || 0;
        const maxPriceVal = parseInt(maxPrice.value) || 100000;

        console.log('Applied filters:', {
            selectedShapes,
            selectedCategories,
            selectedBrands,
            selectedMaterials,
            minPriceVal,
            maxPriceVal
        });

        filteredProducts = allProducts.filter(product => {
            // Price filter
            if (product.price < minPriceVal || product.price > maxPriceVal) {
                return false;
            }

            // Shape filter - FIXED
            if (selectedShapes.length > 0) {
                if (!product.caseShape || !selectedShapes.includes(product.caseShape)) {
                    return false;
                }
            }

            // Category filter - FIXED (was completely wrong before)
            if (selectedCategories.length > 0) {
                if (!product.category) return false;
                
                const productCategories = product.category.split(',').map(cat => cat.trim());
                const hasMatchingCategory = productCategories.some(cat => 
                    selectedCategories.includes(cat)
                );
                if (!hasMatchingCategory) {
                    return false;
                }
            }

            // Brand filter - FIXED
            if (selectedBrands.length > 0) {
                if (!product.brand || !selectedBrands.includes(product.brand)) {
                    return false;
                }
            }

            // Material filter - FIXED
            if (selectedMaterials.length > 0) {
                if (!product.material || !selectedMaterials.includes(product.material)) {
                    return false;
                }
            }

            return true;
        });

        console.log('Filtered products count:', filteredProducts.length);
        
        applySorting();
        updateProductDisplay();
    }

    function getSelectedValues(name) {
        return Array.from(document.querySelectorAll(`input[name="${name}"]:checked`))
            .map(checkbox => checkbox.value);
    }

    // Sorting functionality - FIXED
    function applySorting() {
        const sortValue = document.getElementById('select1').value;
        
        switch(sortValue) {
            case 'price-low-high':
                filteredProducts.sort((a, b) => a.price - b.price);
                break;
            case 'price-high-low':
                filteredProducts.sort((a, b) => b.price - a.price);
                break;
            case 'newest':
                // Assuming newer products have higher product IDs
                filteredProducts.sort((a, b) => b.productId.localeCompare(a.productId));
                break;
            case 'rating':
                filteredProducts.sort((a, b) => b.averageRating - a.averageRating);
                break;
            case 'featured':
            default:
                filteredProducts.sort((a, b) => {
                    // Featured products first
                    if (a.isFeatured !== b.isFeatured) {
                        return b.isFeatured - a.isFeatured;
                    }
                    
                    // If both have same featured status, maintain original order
                    const aIndex = allProducts.findIndex(p => p.productId === a.productId);
                    const bIndex = allProducts.findIndex(p => p.productId === b.productId);
                    return aIndex - bIndex;
                });
                break;
        }
    }

    // Update product display - ENHANCED
    function updateProductDisplay() {
        const container = document.getElementById('products-container');
        
        // Hide all products first
        allProducts.forEach(product => {
            product.element.style.display = 'none';
            product.element.classList.add('product-hidden');
        });
        
        // Show filtered products in correct order
        filteredProducts.forEach((product, index) => {
            product.element.style.display = 'block';
            product.element.classList.remove('product-hidden');
            
            // Reorder elements in DOM to match filtered order
            container.appendChild(product.element);
        });
        
        // Update product count
        const productCount = document.getElementById('product-count');
        if (productCount) {
            productCount.textContent = `Showing ${filteredProducts.length} products`;
        }
        
        // Show/hide no products message
        const noProductsMsg = document.getElementById('no-products');
        if (noProductsMsg) {
            noProductsMsg.style.display = filteredProducts.length === 0 ? 'block' : 'none';
        }
    }

    // Event listeners for filters
    document.addEventListener('DOMContentLoaded', function() {
        const filterCheckboxes = document.querySelectorAll('.filter-section input[type="checkbox"]');
        filterCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                console.log('Filter changed:', this.name, this.value, this.checked);
                applyFilters();
            });
        });

        // Sort dropdown event listener
        const sortSelect = document.getElementById('select1');
        if (sortSelect) {
            sortSelect.addEventListener('change', function() {
                console.log('Sort changed:', this.value);
                applySorting();
                updateProductDisplay();
            });
        }
    });
</script>

    <%- include('../partials/footer') %>